package font

// Minimal 5x7 ASCII glyphs for uppercase letters, digits, space, comma, exclamation.
// Each glyph is 5x7 bits packed into 7 bytes (columns across), MSB=left.

type Glyph struct {
    W, H int
    Rows [7]byte
}

var Width = 5
var Height = 7
var Advance = 6 // 1 px spacing

var glyphs = map[rune]Glyph{
    ' ': {5,7, [7]byte{0,0,0,0,0,0,0}},
    '!': {5,7, [7]byte{0x10,0x10,0x10,0x10,0x00,0x10,0x00}},
    ',': {5,7, [7]byte{0x00,0x00,0x00,0x00,0x10,0x10,0x20}},
    ':': {5,7, [7]byte{0x00,0x04,0x00,0x00,0x00,0x04,0x00}},
    '0': {5,7, [7]byte{0x0E,0x11,0x13,0x15,0x19,0x11,0x0E}},
    '1': {5,7, [7]byte{0x04,0x0C,0x04,0x04,0x04,0x04,0x0E}},
    '2': {5,7, [7]byte{0x0E,0x11,0x01,0x02,0x04,0x08,0x1F}},
    '3': {5,7, [7]byte{0x1F,0x02,0x04,0x02,0x01,0x11,0x0E}},
    '4': {5,7, [7]byte{0x02,0x06,0x0A,0x12,0x1F,0x02,0x02}},
    '5': {5,7, [7]byte{0x1F,0x10,0x1E,0x01,0x01,0x11,0x0E}},
    '6': {5,7, [7]byte{0x06,0x08,0x10,0x1E,0x11,0x11,0x0E}},
    '7': {5,7, [7]byte{0x1F,0x01,0x02,0x04,0x08,0x08,0x08}},
    '8': {5,7, [7]byte{0x0E,0x11,0x11,0x0E,0x11,0x11,0x0E}},
    '9': {5,7, [7]byte{0x0E,0x11,0x11,0x0F,0x01,0x02,0x0C}},
    'A': {5,7, [7]byte{0x0E,0x11,0x11,0x1F,0x11,0x11,0x11}},
    'B': {5,7, [7]byte{0x1E,0x11,0x11,0x1E,0x11,0x11,0x1E}},
    'C': {5,7, [7]byte{0x0E,0x11,0x10,0x10,0x10,0x11,0x0E}},
    'F': {5,7, [7]byte{0x1F,0x10,0x1E,0x10,0x10,0x10,0x10}},
    'H': {5,7, [7]byte{0x11,0x11,0x1F,0x11,0x11,0x11,0x11}},
    'I': {5,7, [7]byte{0x1F,0x04,0x04,0x04,0x04,0x04,0x1F}},
    'G': {5,7, [7]byte{0x0E,0x11,0x10,0x17,0x11,0x11,0x0E}},
    'L': {5,7, [7]byte{0x10,0x10,0x10,0x10,0x10,0x10,0x1F}},
    'O': {5,7, [7]byte{0x0E,0x11,0x11,0x11,0x11,0x11,0x0E}},
    'P': {5,7, [7]byte{0x1E,0x11,0x11,0x1E,0x10,0x10,0x10}},
    'Q': {5,7, [7]byte{0x0E,0x11,0x11,0x11,0x15,0x12,0x0D}},
    'R': {5,7, [7]byte{0x1E,0x11,0x11,0x1E,0x14,0x12,0x11}},
    'T': {5,7, [7]byte{0x1F,0x04,0x04,0x04,0x04,0x04,0x04}},
    'M': {5,7, [7]byte{0x11,0x1B,0x15,0x11,0x11,0x11,0x11}},
    'E': {5,7, [7]byte{0x1F,0x10,0x1E,0x10,0x10,0x10,0x1F}},
    'D': {5,7, [7]byte{0x1E,0x11,0x11,0x11,0x11,0x11,0x1E}},
    'N': {5,7, [7]byte{0x11,0x19,0x15,0x13,0x11,0x11,0x11}},
    'S': {5,7, [7]byte{0x0F,0x10,0x10,0x0E,0x01,0x01,0x1E}},
    'U': {5,7, [7]byte{0x11,0x11,0x11,0x11,0x11,0x11,0x0E}},
    'V': {5,7, [7]byte{0x11,0x11,0x11,0x11,0x0A,0x0A,0x04}},
    'W': {5,7, [7]byte{0x11,0x11,0x11,0x15,0x15,0x1B,0x11}},
    'X': {5,7, [7]byte{0x11,0x0A,0x04,0x04,0x04,0x0A,0x11}},
    'Y': {5,7, [7]byte{0x11,0x0A,0x04,0x04,0x04,0x04,0x04}},
    'Z': {5,7, [7]byte{0x1F,0x01,0x02,0x04,0x08,0x10,0x1F}},
    'K': {5,7, [7]byte{0x11,0x12,0x14,0x18,0x14,0x12,0x11}},
    'J': {5,7, [7]byte{0x01,0x01,0x01,0x01,0x11,0x11,0x0E}},
}

// Get returns glyph and ok.
func Get(r rune) (Glyph, bool) {
    if r >= 'a' && r <= 'z' { r = rune(r - 32) }
    g, ok := glyphs[r]
    return g, ok
}


